-- Migration to schedule a nightly cron job for updating exam readiness reports.\n\n-- 1. Create a wrapper function to update reports for recently active users.\nCREATE OR REPLACE FUNCTION public.refresh_all_readiness_reports()\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER -- Run as the function owner (likely postgres or a superuser)\nSET search_path = public\nAS $$\nDECLARE\n    user_record RECORD;\nBEGIN\n    RAISE LOG 'Starting nightly readiness report refresh.';\n\n    -- Loop through users who have signed in within the last 30 days\n    FOR user_record IN \n        SELECT id \n        FROM auth.users \n        WHERE last_sign_in_at >= NOW() - INTERVAL \'30 days\'\n    LOOP\n        BEGIN\n            -- Call the update function for each active user\n            PERFORM update_user_readiness_report(user_record.id);\n            RAISE LOG 'Refreshed readiness report for user: %s', user_record.id;\n        EXCEPTION\n            WHEN others THEN\n                -- Log any errors for specific users but continue the loop\n                RAISE WARNING 'Error refreshing readiness for user %: %', user_record.id, SQLERRM;\n        END;\n    END LOOP;\n\n    RAISE LOG 'Finished nightly readiness report refresh.';\nEND;\n$$;\n\n-- 2. Schedule the cron job to run the wrapper function daily at 3 AM UTC.\n\n-- Ensure the pg_cron extension is available (optional, Supabase usually has it)\n-- CREATE EXTENSION IF NOT EXISTS pg_cron;\n\n-- Grant usage on the schema to the postgres role if needed (adjust role if necessary)\n-- GRANT USAGE ON SCHEMA public TO postgres;\n-- GRANT EXECUTE ON FUNCTION public.refresh_all_readiness_reports() TO postgres;\n-- GRANT EXECUTE ON FUNCTION public.update_user_readiness_report(UUID) TO postgres;\n-- GRANT SELECT ON auth.users TO postgres; -- Cron job needs to read user IDs\n-- GRANT SELECT ON evt_question_attempts TO postgres; -- Needed by fn_calculate_readiness\n-- GRANT SELECT ON questions TO postgres; -- Needed by fn_calculate_readiness\n-- GRANT SELECT ON subjects TO postgres; -- Needed by fn_calculate_readiness\n-- GRANT SELECT ON topics TO postgres; -- Needed by fn_calculate_readiness\n-- GRANT SELECT ON user_studied_topics TO postgres; -- Needed by fn_calculate_readiness\n-- GRANT INSERT, UPDATE, SELECT ON rep_exam_readiness TO postgres; -- Needed by update_user_readiness_report\n\n-- Unschedule existing job first to ensure idempotency\nSELECT cron.unschedule(\'nightly-readiness-report-update\');\n\n-- Schedule the new job\nSELECT cron.schedule(\n    \'nightly-readiness-report-update\', -- Job name\n    \'0 3 * * *\',                   -- Schedule: Every day at 3:00 AM UTC\n    $$ SELECT public.refresh_all_readiness_reports(); $$ -- Command to execute\n);\n\n-- Example: How to unschedule the job manually if needed\n-- SELECT cron.unschedule(\'nightly-readiness-report-update\'); 